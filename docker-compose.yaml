version: '3.8'
services:

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    networks:
      - kafka_network
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    networks:
      - kafka_network
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT_INTERNAL://0.0.0.0:29092,PLAINTEXT_EXTERNAL://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT_INTERNAL://kafka:29092,PLAINTEXT_EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT_INTERNAL:PLAINTEXT,PLAINTEXT_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      # --- HEALTHCHECK BLOCK HERE ---
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server kafka:29092 --list"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 40s

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    networks:
      - kafka_network
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092

  # --- TELEGRAF SERVICE: REPLACES KAFKA-CONNECT ---
  telegraf:
    image: telegraf:1.24
    container_name: telegraf
    networks:
      - kafka_network
    depends_on:
      kafka:
        condition: service_healthy
      influxdb:
        condition: service_started
    volumes:
      - ./telegraf.conf:/etc/telegraf/telegraf.conf:ro
    restart: on-failure

  influxdb:
    image: influxdb:2.7
    container_name: influxdb
    networks:
      - kafka_network
    ports:
      - "8086:8086"
    volumes:
      - influxdb-storage-v2:/var/lib/influxdb2
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: adminroadsense
      DOCKER_INFLUXDB_INIT_PASSWORD: adminroadsense123
      DOCKER_INFLUXDB_INIT_ORG: my-pothole-org
      DOCKER_INFLUXDB_INIT_BUCKET: pothole_db
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: my-super-secret-token
    healthcheck:
      test: ["CMD", "influx", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  grafana:
    image: grafana/grafana
    container_name: grafana
    networks:
      - kafka_network
    depends_on:
      - influxdb
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin123
    volumes:
      - grafana-storage:/var/lib/grafana

networks:
  kafka_network:
    driver: bridge

volumes:
  grafana-storage:
  influxdb-storage-v2: